{"version":3,"sources":["context/MarkdownContext.tsx","components/MarkdownSanitized.tsx","components/RawInputArea.tsx","hooks/MarkdownHooks.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MarkdownContext","React","createContext","rawText","getMarkDownAsHTMLOutput","__html","handleChangeRawInputedText","input","MarkdownSanitized","Consumer","dangerouslySetInnerHTML","RawInputArea","placeholder","value","onChange","e","target","md","Remarkable","useMarkdownEditor","initValue","useState","localStorage","getItem","getSavedValue","setRawText","useEffect","setItem","text","render","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"mLACaA,G,MAAkBC,IAAMC,cAAc,CAC/CC,QAAS,GACTC,wBAAyB,WACrB,MAAO,CAAEC,OAAQ,KAErBC,2BAA4B,SAACC,Q,OCUlBC,MAdf,WACI,OACI,mCACI,cAACR,EAAgBS,SAAjB,UACK,gBAAGL,EAAH,EAAGA,wBAAH,OACG,qBACIM,wBAAyBN,YCWlCO,MAjBf,WACI,OACI,mCACI,cAACX,EAAgBS,SAAjB,UACK,gBAAGN,EAAH,EAAGA,QAASG,EAAZ,EAAYA,2BAAZ,OACG,0BACIM,YAAY,iBACZC,MAAOV,EACPW,SAAU,SAAAC,GAAC,OAAIT,EAA2BS,EAAEC,OAAOH,gB,OCPrEI,EAAK,I,KAAIC,GA2BAC,MAlBf,SAA2BC,GACvB,MAA8BC,mBARlC,SAAuBD,GAEnB,OADkBE,aAAaC,QAAQ,aAEhCH,EAKgCI,CAAcJ,IAArD,mBAAOjB,EAAP,KAAgBsB,EAAhB,KAcA,OARAC,qBAAU,WACNJ,aAAaK,QAAQ,WAAYxB,KAClC,CAACA,IAMG,CAAEA,UAASG,2BAZlB,SAAoCsB,GAChCH,EAAWG,IAW+BxB,wBAJ9C,WACI,MAAO,CAAEC,OAAQY,EAAGY,OAAO1B,OCLpB2B,MAdf,WAEE,MAAyEX,EAAkB,iBAAnFhB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,wBAAyBE,EAA1C,EAA0CA,2BAE1C,OACE,mCACE,eAACN,EAAgB+B,SAAjB,CAA0BlB,MAAO,CAAEV,UAASC,0BAAyBE,8BAArE,UACE,cAAC,EAAD,IACA,cAAC,EAAD,UCCO0B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.356dcd15.chunk.js","sourcesContent":["import React from 'react';\nexport const MarkdownContext = React.createContext({\n    rawText: '',\n    getMarkDownAsHTMLOutput: (): { __html: string; } => {\n        return { __html: '' };\n    },\n    handleChangeRawInputedText: (input: string) => { },\n});","import { MarkdownContext } from \"../context/MarkdownContext\";\nimport React from 'react';\nfunction MarkdownSanitized() {\n    return (\n        <>\n            <MarkdownContext.Consumer>\n                {({ getMarkDownAsHTMLOutput }) => (\n                    <div\n                        dangerouslySetInnerHTML={getMarkDownAsHTMLOutput()}\n                    />\n                )}\n            </MarkdownContext.Consumer>\n        </>\n    );\n}\n\nexport default MarkdownSanitized;","import { MarkdownContext } from '../context/MarkdownContext';\n\nfunction RawInputArea() {\n    return (\n        <>\n            <MarkdownContext.Consumer>\n                {({ rawText, handleChangeRawInputedText }) => (\n                    <textarea\n                        placeholder=\"Enter Markdown\"\n                        value={rawText}\n                        onChange={e => handleChangeRawInputedText(e.target.value)}\n                    >\n                    </textarea>\n                )}\n            </MarkdownContext.Consumer>\n        </>\n    );\n}\n\nexport default RawInputArea;","import { useState, useEffect } from 'react';\nimport { Remarkable } from 'remarkable';\n\nconst md = new Remarkable();\n\nfunction getSavedValue(initValue: string) {\n    const saveValue = localStorage.getItem('markdown');\n    if (saveValue) return saveValue\n    return initValue;\n}\n\n\nfunction useMarkdownEditor(initValue: string) {\n    const [rawText, setRawText] = useState(getSavedValue(initValue));\n\n    function handleChangeRawInputedText(text: string) {\n        setRawText(text);\n    };\n\n    useEffect(() => {\n        localStorage.setItem('markdown', rawText)\n    }, [rawText])\n\n    function getMarkDownAsHTMLOutput() {\n        return { __html: md.render(rawText) };\n    };\n\n    return { rawText, handleChangeRawInputedText, getMarkDownAsHTMLOutput };\n}\n\nexport default useMarkdownEditor;","import './App.css';\nimport MarkdownSanitized from './components/MarkdownSanitized';\nimport RawInputArea from './components/RawInputArea';\nimport { MarkdownContext } from './context/MarkdownContext';\nimport useMarkdownEditor from './hooks/MarkdownHooks';\nfunction App() {\n\n  const { rawText, getMarkDownAsHTMLOutput, handleChangeRawInputedText } = useMarkdownEditor('# Hello World');\n\n  return (\n    <>\n      <MarkdownContext.Provider value={{ rawText, getMarkDownAsHTMLOutput, handleChangeRawInputedText }}>\n        <RawInputArea />\n        <MarkdownSanitized />\n      </MarkdownContext.Provider>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}